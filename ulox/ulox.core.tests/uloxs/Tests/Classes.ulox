class Simple {}

class Method
{
    Meth(){retval =1;}
    MethBraceless{retval =1;}
}

class WithInit
{
    var a,b;
    
    init(a,b)
    {
        this.a = a;
        this.b = b;
    }

    Sum() { retval =this.a + this.b; }
}

class AutoInitVars
{
    var a,b=10;
    init(a) { }

    Sum() { retval =this.a + this.b; }
}

class Statics
{
    static var a, b = 2;
}

testset Classes
{
    test SimpleClassObject
    {
        Assert.IsNotNull(Simple);
    }

    test SimpleInstance
    {
        var s = Simple();

        Assert.IsNotNull(s);
    }

    test Method
    {
        var expected = 1;
        var result = 0;
        var m = Method();

        result = m.Meth();

        Assert.AreEqual(expected, result);
    }

    test NoInstanceNeededWhenNoThisUsed
    {
        var expected = 1;
        var result = 0;

        result = Method.Meth();

        Assert.AreEqual(expected, result);
    }

    test MethodBracelcess
    {
        var expected = 1;
        var result = 0;
        var m = Method();

        result = m.MethBraceless();

        Assert.AreEqual(expected, result);
    }

    test Initialiser
    {
        var expected = 3;
        var result = 0;
        var w = WithInit(1,2);

        result = w.Sum();

        Assert.AreEqual(expected, result);
    }

    test AutoInitialiser
    {
        var expected = 20;
        var result = 0;
        var w = AutoInitVars(10);

        result = w.Sum();

        Assert.AreEqual(expected, result);
    }

    test BoundMethod
    {
        var expected = 20;
        var result = 0;
        var w = AutoInitVars(10);

        var bound = w.Sum;
        result = bound();

        Assert.AreEqual(expected, result);
    }

//If this is after StaticsVarValueUsage we see statics leaking betweensub vms
    test StaticsInitlaValuesUsage
    {
        Assert.IsNotNull(Statics);
        Assert.IsNull(Statics.a);
    }

    test StaticsVarValueUsage
    {
        var expected = 4;
        var result = 0;

        Statics.a = Statics.b;
        result = Statics.a + Statics.b;

        Assert.AreEqual(expected, result);
    }
}
