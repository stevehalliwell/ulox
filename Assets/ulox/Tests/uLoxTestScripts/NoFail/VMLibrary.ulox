build bind 
    "VmLibrary",
    "VmLibrary";

test VMLibraryTests
{
    testcase InnerVmInsertAndExtract
    {
        var expected = 20;
        var startingValue = 10;
        var result = 0;
        var innerVM = VM();
        fun InnerMain()
        {
            aGlobal *= 2;
        }
        
        innerVM.AddGlobal("aGlobal", startingValue);
        innerVM.Start(InnerMain);

        result = innerVM.GetGlobal("aGlobal");

        Assert.AreEqual(expected, result);
    }

    testcase InnerVmAsGenerator
    {
        var expected = 20;
        var result = 0;
        var innerVM = VM();
        fun InnerMain()
        {
            globalOut = 2;
            yield;
            globalOut = 3;
            yield;
            globalOut = 5;
            yield;
            globalOut = 10;
            yield;
            globalOut = null;
        }

        innerVM.AddGlobal("globalOut",0);

        innerVM.Start(InnerMain);
        loop
        {
            var curVal = innerVM.GetGlobal("globalOut");
            if(curVal != null)
            {
                result += curVal;
                innerVM.Resume();
            }
            else
            {
                break;
            }
        }

        Assert.AreEqual(expected, result);
    }
}