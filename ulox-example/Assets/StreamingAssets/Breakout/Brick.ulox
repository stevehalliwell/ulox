class Brick
{
    var pos = Vec2();
    var go;
    var hitCount;
    var origHitCount;

    init(go, pos, hitCount)
    {
        this.origHitCount = hitCount; 
    }

    SyncColour()
    {
        if(this.go == null) return;

        if(this.hitCount == 1)
        {
            SetSpriteColour(this.go, 0,1,0,1);
        }
        else if(this.hitCount == 2)
        {
            SetSpriteColour(this.go, 0,0,1,1);
        } 
    }

    OnHitByBall()
    {
        this.hitCount = this.hitCount - 1;
        this.SyncColour();

        if(this.hitCount <= 0)
        {
            this.OnBrickDestroy();
        }
    }

    OnBrickDestroy()
    {
        BreakoutInst.GivePointsForBrick(this, this.origHitCount);
        DestroyUnityObject(this.go);
    }
}

// testset BrickTests
// {
//     test OneHitWithTwoCountShouldNotGivePoints
//     {
//         var brick = Brick(null, null, 2);

//         brick.OnHitByBall();
        
//         Assert.AreEqual(1, brick.hitCount);
//     }
    
//     test TwoHitWithTwoCountShouldGivePoints
//     {
//         var brick = Brick(null, null, 2);
//         var gavePoints = false;
//         var mock = {=};
//         mock.GivePointsForBrick = fun (brick, hitCount)
//         {
//             gavePoints = true;
//         };
//         BreakoutInst = mock;

//         brick.OnHitByBall();
//         brick.OnHitByBall();
        
//         Assert.AreEqual(true, gavePoints);
//     }
// }