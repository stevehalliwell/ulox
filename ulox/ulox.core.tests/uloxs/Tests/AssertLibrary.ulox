test AssertUsageTests
{
    testcase AreEqual
    {
        Assert.AreEqual(1,1);
    }
    
    testcase AreNotEqual
    {
        Assert.AreNotEqual(1,2);
    }
    
    testcase AreApproxEqual
    {
        Assert.AreApproxEqual(1,1.001);
    }
    
    testcase IsTrue
    {
        Assert.IsTrue(tcname == "IsTrue");
    }
    
    testcase IsFalse
    {
        Assert.IsFalse(tcname == "IsTrue");
    }
    
    testcase IsNull
    {
        var a;
        Assert.IsNull(a);
    }
    
    testcase IsNotNull
    {
        var a = 1;
        Assert.IsNotNull(a);
    }
    
    testcase DoesContain
    {
        Assert.DoesContain("wo", "hello world");
    }
    
    testcase DoesNotContain
    {
        Assert.DoesNotContain("i", "team");
    }
    
    testcase Throws
    {
        fun WillThrow(){throw;}
        Assert.Throws(WillThrow);
    }
    
    testcase Pass
    {
        Assert.Pass();
    }
    
    testcase Fail
    {
        fun InnerWillFail(){Assert.Fail();}
        // tests are run to pass so we assert that the Fail results in a throw.
        Assert.Throws(InnerWillFail);
    }
    
    testcase AreNotEqual_Throws
    {
        fun InnerWillFail(){Assert.AreNotEqual(1,1);}

        Assert.Throws(InnerWillFail);
    }
    
    testcase IsTrue_Throws
    {
        fun InnerWillFail(){Assert.IsTrue(false);}

        Assert.Throws(InnerWillFail);
    }
    
    testcase IsFalse_Throws
    {
        fun InnerWillFail(){Assert.IsFalse(true);}

        Assert.Throws(InnerWillFail);
    }
    
    testcase IsNull_Throws
    {
        fun InnerWillFail(){Assert.IsNull(true);}

        Assert.Throws(InnerWillFail);
    }
    
    testcase IsNotNull_Throws
    {
        fun InnerWillFail(){Assert.IsNotNull(null);}

        Assert.Throws(InnerWillFail);
    }
    
    testcase DoesContain_Throws
    {
        fun InnerWillFail(){Assert.DoesContain("team", "i");}

        Assert.Throws(InnerWillFail);
    }
    
    testcase DoesNotContain_Throws
    {
        fun InnerWillFail(){Assert.DoesNotContain("hel", "hello");}

        Assert.Throws(InnerWillFail);
    }
    
    testcase Throws_NoParam_Throws
    {
        fun InnerWillFail(){Assert.Throws();}

        Assert.Throws(InnerWillFail);
    }
    
    testcase Throws_InnerDoesNotThrow_Throws
    {
        fun InnerInnerFail(){}

        fun InnerWillFail(){Assert.Throws(InnerInnerFail);}

        Assert.Throws(InnerWillFail);
    }
}