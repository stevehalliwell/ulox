class Base
{
    var basevar = cname;
}

class Cone
{
    var coneType = "plain";
}

class Flavour
{
    var flav = cname;
}

class Syrup
{
    var topping = cname;
}

class Serving < Cone
{
    mixin Flavour;
}

class Bowl 
{
    mixin Flavour;

    var container = cname;
}

class BirthdayBowl
{ 
    mixin 
        Bowl,
        Flavour,
        Syrup;
}

class MixMe
{
    var a = 1;
}
class MixMe2
{
    var b = 2;
}
class MixMe3
{
    var c = 3;
}

class MixMeSub1
{
    var e = 5;
}

class MixMeSub2
{
    var f = 6;
}

class MixMe4
{
    mixin MixMeSub1, MixMeSub2;
    
    var g = 7;
}

class AllTheMixMes 
{
    mixin 
        MixMe,
        MixMe2;
    mixin MixMe3;
    mixin MixMe4;

    var d = 4;
}

test MixinsSimple
{
    testcase ClassWithMixinHasBoth
    {
        var expectedContainer = "Bowl";
        var expectedFlavour = "Flavour";
        var resultContainer;
        var resultFlavour;
        var b = Bowl();

        resultContainer = b.container;
        resultFlavour = b.flav;

        Assert.AreEqual(expectedContainer, resultContainer);
        Assert.AreEqual(expectedFlavour, resultFlavour);
    }

    testcase ClassWithInherAndMixinHasBoth
    {
        var expectedCone = "plain";
        var expectedFlavour = "Flavour";
        var resultCone;
        var resultFlavour;
        var b = Serving();

        resultCone = b.coneType;
        resultFlavour = b.flav;

        Assert.AreEqual(expectedCone, resultCone);
        Assert.AreEqual(expectedFlavour, resultFlavour);
    }

    testcase ClassMadePurelyOfMixins
    {
        var b = BirthdayBowl();

        Assert.AreEqual("Bowl", b.container);
        Assert.AreEqual("Flavour", b.flav);
        Assert.AreEqual("Syrup", b.topping);
    }

    testcase ManyCombinedMixins
    {
        var foo = AllTheMixMes();
        var expected = 28;
        var result = -1;

        result = foo.a + foo.b + foo.c + foo.d + foo.e + foo.f + foo.g;

        Assert.AreEqual(expected, result);
    }
}
