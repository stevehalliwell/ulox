test ControlFlow
{
    testcase If
    {
        var expected = 1;
        var result = 0;
        var a = true;
        var b = true;

        if(a == b)
            result = expected;

        Assert.AreEqual(expected, result);
    }

    testcase IfCompoundLogic
    {
        var expected = 1;
        var result = 0;
        var a = true;
        var b = false;
        var c = true;

        if(!(a == b == c))
            result = expected;

        Assert.AreEqual(expected, result);
    }

    testcase Else
    {
        var expected = 1;
        var result = 0;
        var a = true;
        var b = false;

        if(a == b)
            result = 0;
        else
            result = expected;

        Assert.AreEqual(expected, result);
    }

    testcase ElseIf
    {
        var expected = 1;
        var result = 0;
        var a = true;
        var b = false;
        var c = true;

        if(a == b)
            result = 0;
        else if(a == c)
            result = expected;
        else
            result = 0;

        Assert.AreEqual(expected, result);
    }

    testcase Nested
    {
        var expected = 1;
        var result = 0;
        var a = true;
        var b = true;
        var c = true;

        if(a == b)
        {
            if(a == c)
            {
                result = expected;
            }
        }
        else 
        {
            result = 0;
        }

        Assert.AreEqual(expected, result);
    }

    testcase While
    {
        var expected = 1024;
        var limit = 1000;
        var accum = 1;

        while(accum < limit) accum += accum;

        Assert.AreEqual(expected, accum);
    }

    testcase For
    {
        var expected = 4951;
        var limit = 100;
        var accum = 1;

        for(var i = 0; i < limit; i += 1)
            accum += i;

        Assert.AreEqual(expected, accum);
    }

    testcase Break
    {
        var expected = 1024;
        var limit = 1000;
        var accum = 1;

        while(true)
        {
            accum += accum;
            if(accum > limit) 
                break;
        }

        Assert.AreEqual(expected, accum);
    }

    testcase Loop
    {
        var expected = 128;
        var limit = 100;
        var accum = 1;

        loop
        {
            accum += accum;
            if(accum > limit)
                break;
        }

        Assert.AreEqual(expected, accum);
    }

    testcase ContinueWhile
    {
        var expected = 51;
        var limit = 100;
        var accum = 1;
        var i = 0;
 
        while(i < limit)
        {
            i += 1;
            if(i % 2 == 0)
            {
                continue;
            }

            accum += 1;
        }
 
        Assert.AreEqual(expected, accum);
    }

    testcase ContinueFor
    {
        var expected = 51;
        var limit = 100;
        var accum = 1;
 
        for(var i = 0; i < limit; i += 1)
        {
            if(i % 2 == 0)
            {
                continue;
            }

            accum += 1;
        }
 
        Assert.AreEqual(expected, accum);
    }

    testcase ContinueLoop
    {
        var expected = 51;
        var limit = 100;
        var accum = 1;
        var i = 0;
 
        loop
        {
            i += 1;

            if(i >= limit) break;

            if(i % 2 == 0) continue;

            accum += 1;
        }
 
        Assert.AreEqual(expected, accum);
    }
}