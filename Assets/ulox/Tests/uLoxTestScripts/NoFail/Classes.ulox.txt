class Simple {}

class Method
{
    Meth(){return 1;}
    MethBraceless{return 1;}
}

class WithInit
{
    init(a,b)
    {
        this.a = a;
        this.b = b;
    }

    Sum() { return this.a + this.b; }
}

test Classes
{
    testcase SimpleClassObject
    {
        Assert.IsNotNull(Simple);
    }

    testcase SimpleInstance
    {
        var s = Simple();

        Assert.IsNotNull(s);
    }

    testcase Method
    {
        var expected = 1;
        var result = 0;
        var m = Method();

        result = m.Meth();

        Assert.AreEqual(expected, result);
    }

    testcase NoInstanceNeededWhenNoThisUsed
    {
        var expected = 1;
        var result = 0;

        result = Method.Meth();

        Assert.AreEqual(expected, result);
    }

    testcase MethodBracelcess
    {
        var expected = 1;
        var result = 0;
        var m = Method();

        result = m.MethBraceless();

        Assert.AreEqual(expected, result);
    }

    testcase Initialiser
    {
        var expected = 3;
        var result = 0;
        var w = WithInit(1,2);

        result = w.Sum();

        Assert.AreEqual(expected, result);
    }
}
