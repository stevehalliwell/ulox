class Vec2
{
    var x,y;
    init(x,y){}

    _add(lhs,rhs)
    {
        return Vec2(lhs.x + rhs.x, lhs.y + rhs.y);
    }

    _sub(lhs,rhs)
    {
        return Vec2(lhs.x - rhs.x, lhs.y - rhs.y);
    }

    _mul(lhs,rhs)
    {
        return Vec2(lhs.x * rhs.x, lhs.y * rhs.y);
    }

    _div(lhs,rhs)
    {
        return Vec2(lhs.x / rhs.x, lhs.y / rhs.y);
    }

    _mod(lhs,rhs)
    {
        return Vec2(lhs.x % rhs.x, lhs.y % rhs.y);
    }

    _eq(lhs,rhs)
    {
        return lhs.x == rhs.x and lhs.y == rhs.y;
    }

    _ls(lhs,rhs)
    {
        return !(lhs.x > rhs.x and lhs.y > rhs.y);
    }

    _gr(lhs,rhs)
    {
        return !lhs._ls(lhs,rhs);
    }
}

class IndexableClass
{
    var x,y;
    init(x,y){}

    _gi(self, index)
    {
        if(index == "x")
            return self.x;
        if(index == "y")
            return self.y;

        return null;
    }

    _si(self, index, value)
    {
        if(index == "x")
            self.x = value;
        if(index == "y")
            self.y = value;
    }

    _co(self)
    {
	    return 2;
    }
}

test OperatorOverloading
{
    testcase Add
    {
        var expected = Vec2(4,6);
        var a = Vec2(1,2);
        var b = Vec2(3,4);
        var result;

        result = a + b;

        Assert.AreEqual(expected.x, result.x);
        Assert.AreEqual(expected.y, result.y);
    }

    testcase Sub
    {
        var expected = Vec2(-2,-2);
        var a = Vec2(1,2);
        var b = Vec2(3,4);
        var result;

        result = a - b;

        Assert.AreEqual(expected.x, result.x);
        Assert.AreEqual(expected.y, result.y);
    }

    testcase Mul
    {
        var expected = Vec2(3,8);
        var a = Vec2(1,2);
        var b = Vec2(3,4);
        var result;

        result = a * b;

        Assert.AreEqual(expected.x, result.x);
        Assert.AreEqual(expected.y, result.y);
    }

    testcase Div
    {
        var expected = Vec2(1/3,2/4);
        var a = Vec2(1,2);
        var b = Vec2(3,4);
        var result;

        result = a / b;

        Assert.AreEqual(expected.x, result.x);
        Assert.AreEqual(expected.y, result.y);
    }

    testcase Mod
    {
        var expected = Vec2(1,2);
        var a = Vec2(1,2);
        var b = Vec2(3,4);
        var result;

        result = a % b;

        Assert.AreEqual(expected.x, result.x);
        Assert.AreEqual(expected.y, result.y);
    }

    testcase Eq
    {
        var expected = true;
        var a = Vec2(1,2);
        var b = Vec2(1,2);
        var result = false;

        result = a == b;

        Assert.AreEqual(expected, result);
    }

    testcase NotEq
    {
        var expected = false;
        var a = Vec2(1,2);
        var b = Vec2(1,2);
        var result = true;

        result = a != b;

        Assert.AreEqual(expected, result);
    }

    testcase Less
    {
        var expected = true;
        var a = Vec2(1,2);
        var b = Vec2(1,3);
        var result = false;

        result = a < b;

        Assert.AreEqual(expected, result);
    }

    testcase Greater
    {
        var expected = false;
        var a = Vec2(1,2);
        var b = Vec2(1,3);
        var result = true;

        result = a > b;

        Assert.AreEqual(expected, result);
    }

    testcase GetIndex
    {
        var expectedX = 1;
        var expectedY = 2;
        var resultX = null;
        var resultY = null;
        var indexable = IndexableClass(expectedX, expectedY);

        resultX = indexable["x"];
        resultY = indexable["y"];

        Assert.AreEqual(expectedX, resultX);
        Assert.AreEqual(expectedY, resultY);
    }

    testcase SetIndex
    {
        var initalX = -1;
        var initalY = -2;
        var expectedX = 1;
        var expectedY = 2;
        var resultX = null;
        var resultY = null;
        var indexable = IndexableClass(initalX, initalY);

        indexable["x"] = expectedX;
        indexable["y"] = expectedY;
        resultX = indexable.x;
        resultY = indexable.y;

        Assert.AreEqual(expectedX, resultX);
        Assert.AreEqual(expectedY, resultY);
    }

    testcase CountOf
    {
        var initalX = -1;
        var initalY = -2;
        var expected = 2;
		var res = -1;
        var indexable = IndexableClass(initalX, initalY);
		
		res = countof indexable;

        Assert.AreEqual(expected, res);
    }
}