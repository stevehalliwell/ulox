testset Math
{
    test ([ [1,2,3], [1,1,2], [3,4,7] ]) Addition(a,b, expected)
    {
        var result = 0;

        result = a+b;

        Assert.AreEqual(expected,result);
    }

    test Subtraction
    {
        var expected = -1;
        var result = 0;
        var a = 1;
        var b = 2;

        result = a-b;

        Assert.AreEqual(expected,result);
    }

    test Multiplication
    {
        var expected = 2;
        var result = 0;
        var a = 1;
        var b = 2;

        result = a*b;

        Assert.AreEqual(expected,result);
    }

    test Division
    {
        var expected = 0.5;
        var result = 0;
        var a = 1;
        var b = 2;

        result = a/b;

        Assert.AreEqual(expected,result);
    }

    test ModulusInt
    {
        var expected = 1;
        var result = 0;
        var a = 1;
        var b = 2;

        result = a%b;

        Assert.AreEqual(expected,result);
    }

    test ModulusNumber
    {
        var expected = 1.5;
        var result = 0;
        var a = 1.5;
        var b = 2;

        result = a%b;

        Assert.AreEqual(expected,result);
    }

    test OrderOfOps
    {
        var expected = -2.5;
        var result = 0;
        var a = 1;
        var b = 2;
        var c = 3;
        var d = 4;
        var e = 5;

        result = a+b*c/d-e;

        Assert.AreEqual(expected,result);
    }

    test Precedence
    {
        var expected = 3.5;
        var result = 0;
        var a = 1;
        var b = 2;
        var c = 3;
        var d = 4;
        var e = 2;

        result = (a+b*c)/(d-e);

        Assert.AreEqual(expected,result);
    }

    test CompoundAdd
    {
        var expected = 3;
        var a = 1;
        var b = 2;

        a += b;

        Assert.AreEqual(expected,a);
    }

    test CompoundMul
    {
        var expected = 2;
        var a = 1;
        var b = 2;

        a *= b;

        Assert.AreEqual(expected,a);
    }

    test CompoundSub
    {
        var expected = -1;
        var a = 1;
        var b = 2;

        a -= b;

        Assert.AreEqual(expected,a);
    }

    test CompoundDiv
    {
        var expected = 0.5;
        var a = 1;
        var b = 2;

        a /= b;

        Assert.AreEqual(expected,a);
    }

    test CompoundModulus
    {
        var expected = 1;
        var a = 3;
        var b = 2;

        a %= b;

        Assert.AreEqual(expected,a);
    }

    test InvalidMathOpNonMatchingTypes
    {
        fun WillThrow()
        {
            fun dummy(){}
            dummy+7;
        }

        Assert.Throws(WillThrow);
    }

    test InvalidMathOpUnsupportedTypes
    {
        fun WillThrow()
        {
            fun dummy(){}
            dummy+dummy;
        }

        Assert.Throws(WillThrow);
    }
}