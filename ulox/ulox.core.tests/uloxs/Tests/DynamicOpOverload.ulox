fun MakeVec2(x,y)
{
    var res = {:};

    fun _add(lhs,rhs)
    {
        retval = MakeVec2(lhs.x + rhs.x, lhs.y + rhs.y);
    }

    fun _sub(lhs,rhs)
    {
        retval = MakeVec2(lhs.x - rhs.x, lhs.y - rhs.y);
    }

    fun _mul(lhs,rhs)
    {
        retval = MakeVec2(lhs.x * rhs.x, lhs.y * rhs.y);
    }

    fun _div(lhs,rhs)
    {
        retval = MakeVec2(lhs.x / rhs.x, lhs.y / rhs.y);
    }

    fun _mod(lhs,rhs)
    {
        retval = MakeVec2(lhs.x % rhs.x, lhs.y % rhs.y);
    }

    fun _eq(lhs,rhs)
    {
        retval = (lhs.x == rhs.x and lhs.y == rhs.y);
    }

    fun _ls(lhs,rhs)
    {
        retval = !(lhs.x > rhs.x and lhs.y > rhs.y);
    }

    fun _gr(lhs,rhs)
    {
        retval = !(_ls(lhs,rhs));
    }

    fun _gi(self, index)
    {
        if(index == "x")
        {
            retval = self.x;
            return;
        }
        if(index == "y")
        {
            retval = self.y;
            return;
        }

        retval =null;
    }

    fun _si(self, index, value)
    {
        if(index == "x")
            self.x = value;
        if(index == "y")
            self.y = value;
    }

    res._add = _add;
    res._sub = _sub;
    res._mul = _mul;
    res._div = _div;
    res._mod = _mod;

    res._eq = _eq;
    res._ls = _ls;
    res._gr = _gr;
    
    res._gi = _gi;
    res._si = _si;
    
    res.x = x;
    res.y = y;
    retval =res;
}

testset OperatorOverloading
{
    test Add
    {
        var expected = MakeVec2(4,6);
        var a = MakeVec2(1,2);
        var b = MakeVec2(3,4);
        var result;

        result = a + b;

        Assert.AreEqual(expected.x, result.x);
        Assert.AreEqual(expected.y, result.y);
    }

    test Sub
    {
        var expected = MakeVec2(-2,-2);
        var a = MakeVec2(1,2);
        var b = MakeVec2(3,4);
        var result;

        result = a - b;

        Assert.AreEqual(expected.x, result.x);
        Assert.AreEqual(expected.y, result.y);
    }

    test Mul
    {
        var expected = MakeVec2(3,8);
        var a = MakeVec2(1,2);
        var b = MakeVec2(3,4);
        var result;

        result = a * b;

        Assert.AreEqual(expected.x, result.x);
        Assert.AreEqual(expected.y, result.y);
    }

    test Div
    {
        var expected = MakeVec2(1/3,2/4);
        var a = MakeVec2(1,2);
        var b = MakeVec2(3,4);
        var result;

        result = a / b;

        Assert.AreEqual(expected.x, result.x);
        Assert.AreEqual(expected.y, result.y);
    }

    test Mod
    {
        var expected = MakeVec2(1,2);
        var a = MakeVec2(1,2);
        var b = MakeVec2(3,4);
        var result;

        result = a % b;

        Assert.AreEqual(expected.x, result.x);
        Assert.AreEqual(expected.y, result.y);
    }

    test Eq
    {
        var expected = true;
        var a = MakeVec2(1,2);
        var b = MakeVec2(1,2);
        var result = false;

        result = a == b;

        Assert.AreEqual(expected, result);
    }

    test NotEq
    {
        var expected = false;
        var a = MakeVec2(1,2);
        var b = MakeVec2(1,2);
        var result = true;

        result = a != b;

        Assert.AreEqual(expected, result);
    }

    test Less
    {
        var expected = true;
        var a = MakeVec2(1,2);
        var b = MakeVec2(1,3);
        var result = false;

        result = a < b;

        Assert.AreEqual(expected, result);
    }

    test Greater
    {
        var expected = false;
        var a = MakeVec2(1,2);
        var b = MakeVec2(1,3);
        var result = true;

        result = a > b;

        Assert.AreEqual(expected, result);
    }
    
    test GetIndex
    {
        var expectedX = 1;
        var expectedY = 2;
        var resultX = null;
        var resultY = null;
        var indexable = MakeVec2(expectedX, expectedY);

        resultX = indexable["x"];
        resultY = indexable["y"];

        Assert.AreEqual(expectedX, resultX);
        Assert.AreEqual(expectedY, resultY);
    }

    test SetIndex
    {
        var initalX = -1;
        var initalY = -2;
        var expectedX = 1;
        var expectedY = 2;
        var resultX = null;
        var resultY = null;
        var indexable = MakeVec2(initalX, initalY);

        indexable["x"] = expectedX;
        indexable["y"] = expectedY;
        resultX = indexable.x;
        resultY = indexable.y;

        Assert.AreEqual(expectedX, resultX);
        Assert.AreEqual(expectedY, resultY);
    }
}