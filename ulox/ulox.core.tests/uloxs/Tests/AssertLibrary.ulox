testset AssertUsageTests
{
    test AreEqual
    {
        Assert.AreEqual(1,1);
    }
    
    test AreNotEqual
    {
        Assert.AreNotEqual(1,2);
    }
    
    test AreApproxEqual
    {
        Assert.AreApproxEqual(1,1.001);
    }
    
    test IsTrue
    {
        Assert.IsTrue(tcname == "IsTrue");
    }
    
    test IsFalse
    {
        Assert.IsFalse(tcname == "IsTrue");
    }
    
    test IsNull
    {
        var a;
        Assert.IsNull(a);
    }
    
    test IsNotNull
    {
        var a = 1;
        Assert.IsNotNull(a);
    }
    
    test DoesContain
    {
        Assert.DoesContain("wo", "hello world");
    }
    
    test DoesNotContain
    {
        Assert.DoesNotContain("i", "team");
    }
    
    test Throws
    {
        fun WillThrow(){throw;}
        Assert.Throws(WillThrow);
    }
    
    test Pass
    {
        Assert.Pass();
    }
    
    test Fail
    {
        fun InnerWillFail(){Assert.Fail();}
        // tests are run to pass so we assert that the Fail results in a throw.
        Assert.Throws(InnerWillFail);
    }
    
    test AreNotEqual_Throws
    {
        fun InnerWillFail(){Assert.AreNotEqual(1,1);}

        Assert.Throws(InnerWillFail);
    }
    
    test IsTrue_Throws
    {
        fun InnerWillFail(){Assert.IsTrue(false);}

        Assert.Throws(InnerWillFail);
    }
    
    test IsFalse_Throws
    {
        fun InnerWillFail(){Assert.IsFalse(true);}

        Assert.Throws(InnerWillFail);
    }
    
    test IsNull_Throws
    {
        fun InnerWillFail(){Assert.IsNull(true);}

        Assert.Throws(InnerWillFail);
    }
    
    test IsNotNull_Throws
    {
        fun InnerWillFail(){Assert.IsNotNull(null);}

        Assert.Throws(InnerWillFail);
    }
    
    test DoesContain_Throws
    {
        fun InnerWillFail(){Assert.DoesContain("team", "i");}

        Assert.Throws(InnerWillFail);
    }
    
    test DoesNotContain_Throws
    {
        fun InnerWillFail(){Assert.DoesNotContain("hel", "hello");}

        Assert.Throws(InnerWillFail);
    }
    
    test Throws_NoParam_Throws
    {
        fun InnerWillFail(){Assert.Throws();}

        Assert.Throws(InnerWillFail);
    }
    
    test Throws_InnerDoesNotThrow_Throws
    {
        fun InnerInnerFail(){}

        fun InnerWillFail(){Assert.Throws(InnerInnerFail);}

        Assert.Throws(InnerWillFail);
    }
}