fun Add(lhs, rhs)
{
    retval = lhs+rhs;
}

test Functions
{
    testcase Return
    {
        var expected = 1;
        var result = 0;
        fun GetVal(){retval = expected;}

        result = GetVal();

        Assert.AreEqual(expected, result);
    }

    testcase Closure
    {
        var expected = 1;
        var result = 0;
        fun SetVal(){result = expected;}

        SetVal();

        Assert.AreEqual(expected, result);
    }

    testcase Params
    {
        var expected = 6;
        var result = 0;
        var a = 1;
        var b = 2;
        var c = 3;
        fun Combine(first,second,third)
        {
            retval = first + second + third;
        }

        result = Combine(a,b,c);

        Assert.AreEqual(expected, result);
    }

    testcase RecurFib
    {
        var expected = 34;
        var result = 0;
        var limit = 100;
        fun Fib(n)
        {
            retval = n;
            if (n <= 1)
                return;
            retval = Fib(n-1) + Fib(n-2);
        }

        result = Fib(9);

        Assert.AreEqual(expected, result);
    }

    testcase GlobalFunction
    {
        var expected = 3;
        var result = 0;
        var a = 1;
        var b = 2;

        result = Add(a,b);

        Assert.AreEqual(expected, result);
    }

    testcase Counter
    {
        var expected = 2;
        var result = 0;

        fun makeCounter() 
        {
            var i = 0;
            fun count() 
            {
                i = i + 1;
                retval = i;
                return;
            }

            retval = count;
        }

        var c1 = makeCounter();

        c1();
        result = c1();

        Assert.AreEqual(expected, result);
    }

    testcase Braceless
    {
        var expected = 1;
        var result = 0;
        fun GetVal {retval = expected;}

        result = GetVal();

        Assert.AreEqual(expected, result);
    }
}