var ExpectedCValue = 3;

class SimpleVars
{
    var a;
    var b,c = ExpectedCValue;
}

class InitVars
{
    var a;
    var b,c = ExpectedCValue;

    init(a,b){this.a = a; this.b = b;}
}

class SideEffects
{
    var a = 0;

    Method(b)
    {
        if(b % 2 == 0 or b % 3 == 0) 
            return;

        //todo cannot do this.a += 1 atm
        this.a = this.a + 1;
    }
}


testset WithVarsTests
{
    test Default
    {
        var inst = SimpleVars();

        Assert.IsNull(inst.a);
        Assert.IsNull(inst.b);
        Assert.AreEqual(ExpectedCValue, inst.c);
    }
    
    test Inited
    {
        var ExpectedAValue = 1;
        var ExpectedBValue = 2;
        var inst = InitVars(ExpectedAValue, ExpectedBValue);

        Assert.AreEqual(ExpectedAValue, inst.a);
        Assert.AreEqual(ExpectedBValue, inst.b);
        Assert.AreEqual(ExpectedCValue, inst.c);
    }

    test MethodSideEffects
    {
        var expected = 3;
        var result = 0;
        var s = SideEffects();

        for(var i = 0 ; i < 10; i += 1)
            s.Method(i);

        result = s.a;

        Assert.AreEqual(expected, result);
    }
}