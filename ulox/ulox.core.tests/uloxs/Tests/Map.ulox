testset MapTests
{
    testcase ReadOrDefaultNonExistent
    {
        var key = "key";
        var result = 0;
        var m = [:];

        result = m.ReadOrDefault(key, null);

        Assert.IsNull(result);
    }

    testcase UpdateNonExistent
    {
        var key = "key";
        var initial = "value";
        var result = 0;
        var m = [:];

        result = m.Update(key, initial);

        Assert.IsFalse(result);
    }

    testcase ReadCreatedString
    {
        var key = "key";
        var expected = "value";
        var result = 0;
        var m = [:];

        m.Create(key, expected);
        result = m.Read(key);

        Assert.AreEqual(expected, result);
    }

    testcase CreatedDuplicateString
    {
        var key = "key";
        var initial = "value";
        var result = 0;
        var m = [:];

        m.Create(key, initial);
        result = m.Create(key, initial);

        Assert.IsFalse(result);
    }

    testcase ReadUpdatedString
    {
        var key = "key";
        var initial = "value";
        var expected = "changed";
        var result = 0;
        var m = [:];
        m.Create(key, initial);

        m.Update(key, expected);
        result = m.Read(key);

        Assert.AreEqual(expected, result);
    }

    testcase ReadOrDefaultUpdatedString
    {
        var key = "key";
        var initial = "value";
        var expected = "changed";
        var result = 0;
        var m = [:];
        m.Create(key, initial);

        m.Update(key, expected);
        result = m.ReadOrDefault(key, null);

        Assert.AreEqual(expected, result);
    }

    testcase ReadOrDefaultDeletedString
    {
        var key = "key";
        var initial = "value";
        var result = 0;
        var m = [:];
        m.Create(key, initial);

        m.Delete(key);
        result = m.ReadOrDefault(key, null);

        Assert.IsNull(result);
    }

    testcase CountAfterCreation
    {
        var key = "key";
        var initial = "value";
        var result = 0;
        var expected = 1;
        var m = [:];

        m.Create(key, initial);
        result = m.Count();

        Assert.AreEqual(expected, result);
    }

    testcase CorrectlyRetrieveString
    {
        var key = "key";
        var initial = "value";
        var expected = "value5";
        var result = 0;
        var m = [:];
        
        for(var i = 0; i < 10; i+= 1)
        {
            m.Create(key+str(i), initial+str(i));
        }
        result = m.Read(key+str(5));

        Assert.AreEqual(expected, result);
    }

    testcase ManyAddedRetrieveMissingString
    {
        var key = "key";
        var initial = "value";
        var result = 0;
        var m = [:];
        
        for(var i = 0; i < 10; i+= 1)
        {
            m.Create(key+str(i), initial+str(i));
        }
        result = m.ReadOrDefault(key+str(11), null);

        Assert.IsNull(result);
    }

    testcase InlineCreation
    {
        var dogNoise = "woof";
        var catNoise = "meow";
        var m = ["dog":dogNoise, "cat":catNoise];
        
        Assert.AreEqual(dogNoise, m.Read("dog"));
		Assert.AreEqual(catNoise, m.Read("cat"));
    }
}