fun MakeTestArray()
{
    var arr = [];

    for(var i = 0;i < 5; i += 1)
    {
        arr.Add(i);
    }

    retval = arr;
}

fun accum(cur, running)
{
    retval = running + cur;
}

testset FunctionalCollectionNativeTests
{
    testcase FoldSum
    {
        var arr = MakeTestArray();

        var result = arr.Fold(accum, 0);

        Assert.AreEqual(10, result);
    }

    testcase ReduceSum
    {
        var arr = MakeTestArray();

        var result = arr.Reduce(accum);

        Assert.AreEqual(10, result);
    }

    testcase MapAddOne
    {
        var arr = MakeTestArray();
        fun addone(val)
        {
            retval = val + 1;
        }

        var result = arr.Map(addone);
        
        var reducedResult = result.Reduce(accum);
        Assert.AreEqual(15, reducedResult);
    }

    testcase FilterIsEven
    {
        var arr = MakeTestArray();
        fun isEven(val)
        {
            retval = ((val % 2) != 0);
        }

        var result = arr.Filter(isEven);
        
        var foldResult = result.Reduce(accum);
        Assert.AreEqual(4, foldResult);
    }
}