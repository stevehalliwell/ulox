testset NativeClassesLibraryTests
{
    test ListAsArray
    {
        var list = [];
        var len = 5;
        list.Resize(len, null);

        for (var i = 0; i < list.Count(); i+= 1)
        {
            list[i] = i;
        }

        for (var i = 0; i < list.Count(); i+= 1)
        {
            Assert.AreEqual(i, list[i]);
        }
    }
    
    test ListAdd
    {
        var list = [];
        var len = 5;

        for (var i = 0; i < len; i+= 1)
        {
            list.Add(i);
        }

        for (var i = 0; i < list.Count(); i+= 1)
        {
            Assert.AreEqual(i, list[i]);
        }
    }
    
    test ListRemove
    {
        var list = [];
        var len = 5;
        var target = 3;
        var expected = len-1;
        var result = null;

        for (var i = 0; i < len; i+= 1)
        {
            list.Add(i);
        }
        list.Remove(len-1);
        result = list.Count();

        Assert.AreEqual(expected, result);
    }
    
    test ListEmpty
    {
        var list = [];
        var len = 5;
        var expected = true;
        var result = null;

        for (var i = 0; i < len; i+= 1)
        {
            list.Add(i);
        }
        for (var i = 0; i < len; i+= 1)
        {
            list.Remove(i);
        }
        result = list.Count() == 0;

        Assert.AreEqual(expected, result);
    }
    
    test DynamicUsage
    {
        var expected = 6;
        var result = 0;

        var obj = {:};
        obj.a = 1;
        obj.b = 2;
        obj.c = 3;
        obj.d = -1;
        var d = obj.a + obj.b + obj.c;
        obj.d = d;
        result = obj.d;

        Assert.AreEqual(expected, result);
    }
}

testset DynamicLibraryTests
{
    test DynamicHasField
    {
        var expectedA = true;
        var expectedB = false;
        var resultA = false;
        var resultB = true;
        var obj = {:};
        obj.a = 7;

        resultA = obj.HasField(obj, "a");
        resultB = obj.HasField(obj, "b");

        Assert.AreEqual(expectedA, resultA);
        Assert.AreEqual(expectedB, resultB);
    }

    test DynamicRemoveField
    {
        var expected = false;
        var result = 0;
        var obj = {:};
        obj.a = 7;

        obj.RemoveField(obj, "a");
        result = obj.HasField(obj, "a");

        Assert.AreEqual(expected, result);
    }
}