class Base
{
    var basevar = cname;
}

class Cone
{
    var coneType = "plain";
}

class Flavour
{
    var flav = cname;
}

class Syrup
{
    var topping = cname;
}

class Serving < Cone
{
    mixin Flavour;
}

class Bowl 
{
    mixin Flavour;

    var container = cname;
}

class BirthdayBowl
{ 
    mixin 
        Bowl,
        Flavour,
        Syrup;
}

test Mixins
{
    testcase ClassWithMixinHasBoth
    {
        var expectedContainer = "Bowl";
        var expectedFlavour = "Flavour";
        var resultContainer;
        var resultFlavour;
        var b = Bowl();

        resultContainer = b.container;
        resultFlavour = b.flav;

        Assert.AreEqual(expectedContainer, resultContainer);
        Assert.AreEqual(expectedFlavour, resultFlavour);
    }

    testcase ClassWithInherAndMixinHasBoth
    {
        var expectedCone = "plain";
        var expectedFlavour = "Flavour";
        var resultCone;
        var resultFlavour;
        var b = Serving();

        resultCone = b.coneType;
        resultFlavour = b.flav;

        Assert.AreEqual(expectedCone, resultCone);
        Assert.AreEqual(expectedFlavour, resultFlavour);
    }

    testcase ClassMadePurelyOfMixins
    {
        var b = BirthdayBowl();

        Assert.AreEqual("Bowl", b.container);
        Assert.AreEqual("Flavour", b.flav);
        Assert.AreEqual("Syrup", b.topping);
    }
}
