testset ControlFlow
{
    test If
    {
        var expected = 1;
        var result = 0;
        var a = true;
        var b = true;

        if(a == b)
            result = expected;

        Assert.AreEqual(expected, result);
    }

    test IfCompoundLogic
    {
        var expected = 1;
        var result = 0;
        var a = true;
        var b = false;
        var c = true;

        if(!(a == b == c))
            result = expected;

        Assert.AreEqual(expected, result);
    }

    test Else
    {
        var expected = 1;
        var result = 0;
        var a = true;
        var b = false;

        if(a == b)
            result = 0;
        else
            result = expected;

        Assert.AreEqual(expected, result);
    }

    test ElseIf
    {
        var expected = 1;
        var result = 0;
        var a = true;
        var b = false;
        var c = true;

        if(a == b)
            result = 0;
        else if(a == c)
            result = expected;
        else
            result = 0;

        Assert.AreEqual(expected, result);
    }

    test Nested
    {
        var expected = 1;
        var result = 0;
        var a = true;
        var b = true;
        var c = true;

        if(a == b)
        {
            if(a == c)
            {
                result = expected;
            }
        }
        else 
        {
            result = 0;
        }

        Assert.AreEqual(expected, result);
    }

    test While
    {
        var expected = 1024;
        var limit = 1000;
        var accum = 1;

        while(accum < limit) accum += accum;

        Assert.AreEqual(expected, accum);
    }

    test For
    {
        var expected = 4951;
        var limit = 100;
        var accum = 1;

        for(var i = 0; i < limit; i += 1)
            accum += i;

        Assert.AreEqual(expected, accum);
    }

    test ForNoDeclare
    {
        var expected = 4951;
        var limit = 100;
        var accum = 1;
        var i = 0;

        for(; i < limit; i += 1)
            accum += i;

        Assert.AreEqual(expected, accum);
    }

    test Break
    {
        var expected = 1024;
        var limit = 1000;
        var accum = 1;

        while(true)
        {
            accum += accum;
            if(accum > limit) 
                break;
        }

        Assert.AreEqual(expected, accum);
    }

    test Loop
    {
        var expected = 128;
        var limit = 100;
        var accum = 1;

        loop
        {
            accum += accum;
            if(accum > limit)
                break;
        }

        Assert.AreEqual(expected, accum);
    }

    test ContinueWhile
    {
        var expected = 51;
        var limit = 100;
        var accum = 1;
        var i = 0;

        while(i < limit)
        {
            i += 1;
            if(i % 2 == 0)
            {
                continue;
            }

            accum += 1;
        }

        Assert.AreEqual(expected, accum);
    }

    test ContinueFor
    {
        var expected = 51;
        var limit = 100;
        var accum = 1;

        for(var i = 0; i < limit; i += 1)
        {
            if(i % 2 == 0)
            {
                continue;
            }

            accum += 1;
        }

        Assert.AreEqual(expected, accum);
    }

    test ContinueLoop
    {
        var expected = 51;
        var limit = 100;
        var accum = 1;
        var i = 0;

        loop
        {
            i += 1;

            if(i >= limit) break;

            if(i % 2 == 0) continue;

            accum += 1;
        }

        Assert.AreEqual(expected, accum);
    }
    
    test InvalidCompareOnNonDoubleTypes
    {
        fun WillThrow()
        {
            7 < true;
        }

        Assert.Throws(WillThrow);
    }

    test MatchSimple
    {
        var expected = 1;
        var result = 0;
        var target = 2;

        match target
        {
            1 : result = 1;
            2 : result = expected;
            3 : result = 3;
        }

        Assert.AreEqual(expected, result);
    }

    test MatchExpressionCompares
    {
        var expected = 1;
        var result = 0;
        var target = 2;

        fun One {retval =1;}

        match target
        {
            One() : result = 1;
            1+1 : result = expected;
            One()+1+One() : result = 3;
        }

        Assert.AreEqual(expected, result);
    }

    test MatchBlockBody
    {
        var expected = 1;
        var result1 = 0;
        var result2 = 0;
        var target = 2;

        fun One {retval =1;}

        match target
        {
            One() : result1 = 1;
            1+1 : 
            {
                result1 = expected;
                result2 = expected;
            }
            One()+1+One() : result1 = 3;
        }

        Assert.AreEqual(expected, result1);
        Assert.AreEqual(expected, result2);
    }
}