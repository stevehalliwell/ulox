//The scope of access a function requires is tracked and can be limited
//  with the 'local' and 'pure' keywords.
//A function marked with 'local' cannot make global var fetch or assignment itself.
//A function marked with 'pure' cannot make global var fetch or assignment itself, nor
//  can it invoke non-pure callable, and it cannot make use of 'this'. 

//This function is not marked but is pure, as it only uses it's own information.
fun Foo()
{
    retval = 4;
}

//This function is not local or pure. It makes use of Foo, via global lookup.
fun NonLocal()
{
    retval = Foo();
}

//This function is local. Only access that which it is passed in.
fun local CallArg(func)
{
    retval = func();
}

print(CallArg(NonLocal));


//This function is pure. Only access that which it is passed in and they must also be pure.
//  If not pure, an error is thrown.
fun pure PureCallArg(func)
{
    retval = func();
}

fun NonPureThrowing()
{
    retval = PureCallArg(Foo);
}

Assert.Throws(NonPureThrowing);